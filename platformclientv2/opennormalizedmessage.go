package platformclientv2
import (
	"github.com/leekchan/timeutil"
	"encoding/json"
	"strconv"
	"strings"
)

// Opennormalizedmessage - Open Messaging rich media message structure
type Opennormalizedmessage struct { 
	// Id - Unique ID of the message. This ID is generated by Messaging Platform. Message receipts will have the same ID as the message they reference.
	Id *string `json:"id,omitempty"`


	// Channel - Channel-specific information that describes the message and the message channel/provider.
	Channel *Openmessagingchannel `json:"channel,omitempty"`


	// VarType - Message type.
	VarType *string `json:"type,omitempty"`


	// Text - Message text.
	Text *string `json:"text,omitempty"`


	// Content - List of content elements.
	Content *[]Openmessagecontent `json:"content,omitempty"`


	// Direction - The direction of the message.
	Direction *string `json:"direction,omitempty"`

}

func (u *Opennormalizedmessage) MarshalJSON() ([]byte, error) {
	// Redundant initialization to avoid unused import errors for models with no Time values
	_  = timeutil.Timedelta{}
	type Alias Opennormalizedmessage

	

	return json.Marshal(&struct { 
		Id *string `json:"id,omitempty"`
		
		Channel *Openmessagingchannel `json:"channel,omitempty"`
		
		VarType *string `json:"type,omitempty"`
		
		Text *string `json:"text,omitempty"`
		
		Content *[]Openmessagecontent `json:"content,omitempty"`
		
		Direction *string `json:"direction,omitempty"`
		*Alias
	}{ 
		Id: u.Id,
		
		Channel: u.Channel,
		
		VarType: u.VarType,
		
		Text: u.Text,
		
		Content: u.Content,
		
		Direction: u.Direction,
		Alias:    (*Alias)(u),
	})
}

// String returns a JSON representation of the model
func (o *Opennormalizedmessage) String() string {
	j, _ := json.Marshal(o)
	str, _ := strconv.Unquote(strings.Replace(strconv.Quote(string(j)), `\\u`, `\u`, -1))

	return str
}
