package platformclientv2
import (
	"github.com/leekchan/timeutil"
	"encoding/json"
	"strconv"
	"strings"
)

// Browser
type Browser struct { 
	// Family - Browser family (e.g. Chrome, Safari, Firefox).
	Family *string `json:"family,omitempty"`


	// Version - Browser version (e.g. 68.0.3440.84).
	Version *string `json:"version,omitempty"`


	// Lang - Language the browser is set to. Must conform to BCP 47.
	Lang *string `json:"lang,omitempty"`


	// Fingerprint - Fingerprint generated by looking at the individual browser features.
	Fingerprint *string `json:"fingerprint,omitempty"`


	// IsMobile - Flag that is true for mobile devices.
	IsMobile *bool `json:"isMobile,omitempty"`


	// ViewHeight - Browser's viewport height.
	ViewHeight *int `json:"viewHeight,omitempty"`


	// ViewWidth - Browser's viewport width.
	ViewWidth *int `json:"viewWidth,omitempty"`


	// FeaturesFlash - Whether Flash is installed.
	FeaturesFlash *bool `json:"featuresFlash,omitempty"`


	// FeaturesJava - Whether Java is installed.
	FeaturesJava *bool `json:"featuresJava,omitempty"`


	// FeaturesPdf - Whether the browser recognizes PDFs.
	FeaturesPdf *bool `json:"featuresPdf,omitempty"`


	// FeaturesWebrtc - Whether WebRTC is supported.
	FeaturesWebrtc *bool `json:"featuresWebrtc,omitempty"`

}

func (o *Browser) MarshalJSON() ([]byte, error) {
	// Redundant initialization to avoid unused import errors for models with no Time values
	_  = timeutil.Timedelta{}
	type Alias Browser
	
	return json.Marshal(&struct { 
		Family *string `json:"family,omitempty"`
		
		Version *string `json:"version,omitempty"`
		
		Lang *string `json:"lang,omitempty"`
		
		Fingerprint *string `json:"fingerprint,omitempty"`
		
		IsMobile *bool `json:"isMobile,omitempty"`
		
		ViewHeight *int `json:"viewHeight,omitempty"`
		
		ViewWidth *int `json:"viewWidth,omitempty"`
		
		FeaturesFlash *bool `json:"featuresFlash,omitempty"`
		
		FeaturesJava *bool `json:"featuresJava,omitempty"`
		
		FeaturesPdf *bool `json:"featuresPdf,omitempty"`
		
		FeaturesWebrtc *bool `json:"featuresWebrtc,omitempty"`
		*Alias
	}{ 
		Family: o.Family,
		
		Version: o.Version,
		
		Lang: o.Lang,
		
		Fingerprint: o.Fingerprint,
		
		IsMobile: o.IsMobile,
		
		ViewHeight: o.ViewHeight,
		
		ViewWidth: o.ViewWidth,
		
		FeaturesFlash: o.FeaturesFlash,
		
		FeaturesJava: o.FeaturesJava,
		
		FeaturesPdf: o.FeaturesPdf,
		
		FeaturesWebrtc: o.FeaturesWebrtc,
		Alias:    (*Alias)(o),
	})
}

func (o *Browser) UnmarshalJSON(b []byte) error {
	var BrowserMap map[string]interface{}
	err := json.Unmarshal(b, &BrowserMap)
	if err != nil {
		return err
	}
	
	if Family, ok := BrowserMap["family"].(string); ok {
		o.Family = &Family
	}
	
	if Version, ok := BrowserMap["version"].(string); ok {
		o.Version = &Version
	}
	
	if Lang, ok := BrowserMap["lang"].(string); ok {
		o.Lang = &Lang
	}
	
	if Fingerprint, ok := BrowserMap["fingerprint"].(string); ok {
		o.Fingerprint = &Fingerprint
	}
	
	if IsMobile, ok := BrowserMap["isMobile"].(bool); ok {
		o.IsMobile = &IsMobile
	}
	
	if ViewHeight, ok := BrowserMap["viewHeight"].(float64); ok {
		ViewHeightInt := int(ViewHeight)
		o.ViewHeight = &ViewHeightInt
	}
	
	if ViewWidth, ok := BrowserMap["viewWidth"].(float64); ok {
		ViewWidthInt := int(ViewWidth)
		o.ViewWidth = &ViewWidthInt
	}
	
	if FeaturesFlash, ok := BrowserMap["featuresFlash"].(bool); ok {
		o.FeaturesFlash = &FeaturesFlash
	}
	
	if FeaturesJava, ok := BrowserMap["featuresJava"].(bool); ok {
		o.FeaturesJava = &FeaturesJava
	}
	
	if FeaturesPdf, ok := BrowserMap["featuresPdf"].(bool); ok {
		o.FeaturesPdf = &FeaturesPdf
	}
	
	if FeaturesWebrtc, ok := BrowserMap["featuresWebrtc"].(bool); ok {
		o.FeaturesWebrtc = &FeaturesWebrtc
	}
	

	return nil
}

// String returns a JSON representation of the model
func (o *Browser) String() string {
	j, _ := json.Marshal(o)
	str, _ := strconv.Unquote(strings.Replace(strconv.Quote(string(j)), `\\u`, `\u`, -1))

	return str
}
