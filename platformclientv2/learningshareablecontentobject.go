package platformclientv2
import (
	"github.com/leekchan/timeutil"
	"reflect"
	"encoding/json"
	"strconv"
	"strings"
)

// Learningshareablecontentobject - Learning assignment SCO (Shareable Content Object)
type Learningshareablecontentobject struct { 
	// SetFieldNames defines the list of fields to use for controlled JSON serialization
	SetFieldNames map[string]bool `json:"-"`
	// Id - The ID of the SCO from the course manifest.
	Id *string `json:"id,omitempty"`

	// LessonStatus - The status of the SCO. Maps to the SCORM 1.2 cmi.core.lesson_status property.
	LessonStatus *string `json:"lessonStatus,omitempty"`

	// Exit - Indicates how or why the learner left the SCO. Maps to the SCORM 1.2 cmi.core.exit property.
	Exit *string `json:"exit,omitempty"`

	// Location - The learnerâ€™s current location in the SCO. Maps to the SCORM 1.2 cmi.core.lesson_location property.
	Location *string `json:"location,omitempty"`

	// ScoreRaw - The score of the most recent attempt on the SCO. Maps to the SCORM 1.2 cmi.core.score.raw property.
	ScoreRaw *float32 `json:"scoreRaw,omitempty"`

	// ScoreMax - The maximum score that could be achieved on the SCO. Maps to the SCORM 1.2 cmi.core.score.max property.
	ScoreMax *float32 `json:"scoreMax,omitempty"`

	// ScoreMin - The minimum score that could be achieved on the SCO. Maps to the SCORM 1.2 cmi.core.score.min property.
	ScoreMin *float32 `json:"scoreMin,omitempty"`

	// SuspendData - The unique information generated by the SCO from previous uses. Maps to the SCORM 1.2 cmi.suspend_data property.
	SuspendData *string `json:"suspendData,omitempty"`

	// Credit - Whether completing this course counts towards the overall assignment. Maps to the SCORM 1.2 cmi.core.credit property.
	Credit *string `json:"credit,omitempty"`

	// Entry - Whether the learner has previously accessed this SCO. Maps to the SCORM 1.2 cmi.core.entry property.
	Entry *string `json:"entry,omitempty"`

	// Mode - Identifies the mode in which the SCO should be presented to the learner. Maps to the SCORM 1.2 cmi.core.lesson_mode property.
	Mode *string `json:"mode,omitempty"`

	// TotalTime - The total amount of time the learner has spent in the SCO expressed as an ISO 8601 Duration, for example PT2H10M3.5S. Maps to the SCORM 1.2 cmi.core.total_time property.
	TotalTime *string `json:"totalTime,omitempty"`

	// SessionTime - The amount of time spent in the SCO in this session expressed as an ISO-8601 Duration, for example PT2H10M3.5S. Maps to the SCORM 1.2 cmi.core.session_time property.
	SessionTime *string `json:"sessionTime,omitempty"`

	// Href - The href from the course manifest for this SCO.
	Href *string `json:"href,omitempty"`

	// Parameters - The parameters from the course manifest for this SCO.
	Parameters *string `json:"parameters,omitempty"`

	// LaunchData - The launch data from the course manifest for this SCO.
	LaunchData *string `json:"launchData,omitempty"`
}

// SetField uses reflection to set a field on the model if the model has a property SetFieldNames, and triggers custom JSON serialization logic to only serialize properties that have been set using this function.
func (o *Learningshareablecontentobject) SetField(field string, fieldValue interface{}) {
	// Get Value object for field
	target := reflect.ValueOf(o)
	targetField := reflect.Indirect(target).FieldByName(field)

	// Set value
	if fieldValue != nil {
		targetField.Set(reflect.ValueOf(fieldValue))
	} else {
		// Must create a new Value (creates **type) then get its element (*type), which will be nil pointer of the appropriate type
		x := reflect.Indirect(reflect.New(targetField.Type()))
		targetField.Set(x)
	}

	// Add field to set field names list
	if o.SetFieldNames == nil {
		o.SetFieldNames = make(map[string]bool)
	}
	o.SetFieldNames[field] = true
}

func (o Learningshareablecontentobject) MarshalJSON() ([]byte, error) {
	// Special processing to dynamically construct object using only field names that have been set using SetField. This generates payloads suitable for use with PATCH API endpoints.
	if len(o.SetFieldNames) > 0 {
		// Get reflection Value
		val := reflect.ValueOf(o)

		// Known field names that require type overrides
		dateTimeFields := []string{  }
		localDateTimeFields := []string{  }
		dateFields := []string{  }

		// Construct object
		newObj := make(map[string]interface{})
		for fieldName := range o.SetFieldNames {
			// Get initial field value
			fieldValue := val.FieldByName(fieldName).Interface()

			// Apply value formatting overrides
			if fieldValue == nil || reflect.ValueOf(fieldValue).IsNil()  {
				// Do nothing. Just catching this case to avoid trying to custom serialize a nil value
			} else if contains(dateTimeFields, fieldName) {
				fieldValue = timeutil.Strftime(toTime(fieldValue), "%Y-%m-%dT%H:%M:%S.%fZ")
			} else if contains(localDateTimeFields, fieldName) {
				fieldValue = timeutil.Strftime(toTime(fieldValue), "%Y-%m-%dT%H:%M:%S.%f")
			} else if contains(dateFields, fieldName) {
				fieldValue = timeutil.Strftime(toTime(fieldValue), "%Y-%m-%d")
			}

			// Assign value to field using JSON tag name
			newObj[getFieldName(reflect.TypeOf(&o), fieldName)] = fieldValue
		}

		// Marshal and return dynamically constructed interface
		return json.Marshal(newObj)
	}

	// Redundant initialization to avoid unused import errors for models with no Time values
	_  = timeutil.Timedelta{}
	type Alias Learningshareablecontentobject
	
	return json.Marshal(&struct { 
		Id *string `json:"id,omitempty"`
		
		LessonStatus *string `json:"lessonStatus,omitempty"`
		
		Exit *string `json:"exit,omitempty"`
		
		Location *string `json:"location,omitempty"`
		
		ScoreRaw *float32 `json:"scoreRaw,omitempty"`
		
		ScoreMax *float32 `json:"scoreMax,omitempty"`
		
		ScoreMin *float32 `json:"scoreMin,omitempty"`
		
		SuspendData *string `json:"suspendData,omitempty"`
		
		Credit *string `json:"credit,omitempty"`
		
		Entry *string `json:"entry,omitempty"`
		
		Mode *string `json:"mode,omitempty"`
		
		TotalTime *string `json:"totalTime,omitempty"`
		
		SessionTime *string `json:"sessionTime,omitempty"`
		
		Href *string `json:"href,omitempty"`
		
		Parameters *string `json:"parameters,omitempty"`
		
		LaunchData *string `json:"launchData,omitempty"`
		Alias
	}{ 
		Id: o.Id,
		
		LessonStatus: o.LessonStatus,
		
		Exit: o.Exit,
		
		Location: o.Location,
		
		ScoreRaw: o.ScoreRaw,
		
		ScoreMax: o.ScoreMax,
		
		ScoreMin: o.ScoreMin,
		
		SuspendData: o.SuspendData,
		
		Credit: o.Credit,
		
		Entry: o.Entry,
		
		Mode: o.Mode,
		
		TotalTime: o.TotalTime,
		
		SessionTime: o.SessionTime,
		
		Href: o.Href,
		
		Parameters: o.Parameters,
		
		LaunchData: o.LaunchData,
		Alias:    (Alias)(o),
	})
}

func (o *Learningshareablecontentobject) UnmarshalJSON(b []byte) error {
	var LearningshareablecontentobjectMap map[string]interface{}
	err := json.Unmarshal(b, &LearningshareablecontentobjectMap)
	if err != nil {
		return err
	}
	
	if Id, ok := LearningshareablecontentobjectMap["id"].(string); ok {
		o.Id = &Id
	}
    
	if LessonStatus, ok := LearningshareablecontentobjectMap["lessonStatus"].(string); ok {
		o.LessonStatus = &LessonStatus
	}
    
	if Exit, ok := LearningshareablecontentobjectMap["exit"].(string); ok {
		o.Exit = &Exit
	}
    
	if Location, ok := LearningshareablecontentobjectMap["location"].(string); ok {
		o.Location = &Location
	}
    
	if ScoreRaw, ok := LearningshareablecontentobjectMap["scoreRaw"].(float64); ok {
		ScoreRawFloat32 := float32(ScoreRaw)
		o.ScoreRaw = &ScoreRawFloat32
	}
	
	if ScoreMax, ok := LearningshareablecontentobjectMap["scoreMax"].(float64); ok {
		ScoreMaxFloat32 := float32(ScoreMax)
		o.ScoreMax = &ScoreMaxFloat32
	}
	
	if ScoreMin, ok := LearningshareablecontentobjectMap["scoreMin"].(float64); ok {
		ScoreMinFloat32 := float32(ScoreMin)
		o.ScoreMin = &ScoreMinFloat32
	}
	
	if SuspendData, ok := LearningshareablecontentobjectMap["suspendData"].(string); ok {
		o.SuspendData = &SuspendData
	}
    
	if Credit, ok := LearningshareablecontentobjectMap["credit"].(string); ok {
		o.Credit = &Credit
	}
    
	if Entry, ok := LearningshareablecontentobjectMap["entry"].(string); ok {
		o.Entry = &Entry
	}
    
	if Mode, ok := LearningshareablecontentobjectMap["mode"].(string); ok {
		o.Mode = &Mode
	}
    
	if TotalTime, ok := LearningshareablecontentobjectMap["totalTime"].(string); ok {
		o.TotalTime = &TotalTime
	}
    
	if SessionTime, ok := LearningshareablecontentobjectMap["sessionTime"].(string); ok {
		o.SessionTime = &SessionTime
	}
    
	if Href, ok := LearningshareablecontentobjectMap["href"].(string); ok {
		o.Href = &Href
	}
    
	if Parameters, ok := LearningshareablecontentobjectMap["parameters"].(string); ok {
		o.Parameters = &Parameters
	}
    
	if LaunchData, ok := LearningshareablecontentobjectMap["launchData"].(string); ok {
		o.LaunchData = &LaunchData
	}
    

	return nil
}

// String returns a JSON representation of the model
func (o *Learningshareablecontentobject) String() string {
	j, _ := json.Marshal(o)
	str, _ := strconv.Unquote(strings.Replace(strconv.Quote(string(j)), `\\u`, `\u`, -1))

	return str
}
