package platformclientv2
import (
	"github.com/leekchan/timeutil"
	"encoding/json"
	"strconv"
	"strings"
)

// Webmessagingmessage - A web messaging message
type Webmessagingmessage struct { 
	// Id - Unique ID of the message. This ID is generated by Messaging Platform. Message receipts will have the same ID as the message they reference.
	Id *string `json:"id,omitempty"`


	// Channel - Channel-specific information that describes the message and the message channel/provider.
	Channel *Webmessagingchannel `json:"channel,omitempty"`


	// VarType - Message type.
	VarType *string `json:"type,omitempty"`


	// Text - Message text.
	Text *string `json:"text,omitempty"`


	// Content - List of content elements.
	Content *[]Webmessagingcontent `json:"content,omitempty"`


	// Events - List of event elements.
	Events *[]Webmessagingevent `json:"events,omitempty"`


	// Direction - The direction of the message.  Direction is always from the perspective of the Genesys Cloud platform.  An Inbound message is one sent from a guest to the Genesys Cloud Platform.  An Outbound message is one sent from the Genesys Cloud Platform to a guest.
	Direction *string `json:"direction,omitempty"`


	// OriginatingEntity - Specifies if this message was sent by a human agent or bot. The platform may use this to apply appropriate provider policies.
	OriginatingEntity *string `json:"originatingEntity,omitempty"`


	// Metadata - Additional metadata about this message.
	Metadata *map[string]string `json:"metadata,omitempty"`

}

func (o *Webmessagingmessage) MarshalJSON() ([]byte, error) {
	// Redundant initialization to avoid unused import errors for models with no Time values
	_  = timeutil.Timedelta{}
	type Alias Webmessagingmessage
	
	return json.Marshal(&struct { 
		Id *string `json:"id,omitempty"`
		
		Channel *Webmessagingchannel `json:"channel,omitempty"`
		
		VarType *string `json:"type,omitempty"`
		
		Text *string `json:"text,omitempty"`
		
		Content *[]Webmessagingcontent `json:"content,omitempty"`
		
		Events *[]Webmessagingevent `json:"events,omitempty"`
		
		Direction *string `json:"direction,omitempty"`
		
		OriginatingEntity *string `json:"originatingEntity,omitempty"`
		
		Metadata *map[string]string `json:"metadata,omitempty"`
		*Alias
	}{ 
		Id: o.Id,
		
		Channel: o.Channel,
		
		VarType: o.VarType,
		
		Text: o.Text,
		
		Content: o.Content,
		
		Events: o.Events,
		
		Direction: o.Direction,
		
		OriginatingEntity: o.OriginatingEntity,
		
		Metadata: o.Metadata,
		Alias:    (*Alias)(o),
	})
}

func (o *Webmessagingmessage) UnmarshalJSON(b []byte) error {
	var WebmessagingmessageMap map[string]interface{}
	err := json.Unmarshal(b, &WebmessagingmessageMap)
	if err != nil {
		return err
	}
	
	if Id, ok := WebmessagingmessageMap["id"].(string); ok {
		o.Id = &Id
	}
    
	if Channel, ok := WebmessagingmessageMap["channel"].(map[string]interface{}); ok {
		ChannelString, _ := json.Marshal(Channel)
		json.Unmarshal(ChannelString, &o.Channel)
	}
	
	if VarType, ok := WebmessagingmessageMap["type"].(string); ok {
		o.VarType = &VarType
	}
    
	if Text, ok := WebmessagingmessageMap["text"].(string); ok {
		o.Text = &Text
	}
    
	if Content, ok := WebmessagingmessageMap["content"].([]interface{}); ok {
		ContentString, _ := json.Marshal(Content)
		json.Unmarshal(ContentString, &o.Content)
	}
	
	if Events, ok := WebmessagingmessageMap["events"].([]interface{}); ok {
		EventsString, _ := json.Marshal(Events)
		json.Unmarshal(EventsString, &o.Events)
	}
	
	if Direction, ok := WebmessagingmessageMap["direction"].(string); ok {
		o.Direction = &Direction
	}
    
	if OriginatingEntity, ok := WebmessagingmessageMap["originatingEntity"].(string); ok {
		o.OriginatingEntity = &OriginatingEntity
	}
    
	if Metadata, ok := WebmessagingmessageMap["metadata"].(map[string]interface{}); ok {
		MetadataString, _ := json.Marshal(Metadata)
		json.Unmarshal(MetadataString, &o.Metadata)
	}
	

	return nil
}

// String returns a JSON representation of the model
func (o *Webmessagingmessage) String() string {
	j, _ := json.Marshal(o)
	str, _ := strconv.Unquote(strings.Replace(strconv.Quote(string(j)), `\\u`, `\u`, -1))

	return str
}
