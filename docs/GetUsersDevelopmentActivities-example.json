config := platformclientv2.GetDefaultConfiguration()
config.BasePath = ""    // expected format: https://api.mypurecloud.com
config.AccessToken = "your_access_token" // or use AuthorizeClientCredentials(...), AuthorizeCodeGrant(...) or AuthorizePKCEGrant(...)

apiInstance := platformclientv2.NewUsersApiWithConfig(config)

var userId []string // Specifies the list of user IDs to be queried, up to 100 user IDs. It searches for any relationship for the userId.
var moduleId string // Specifies the ID of the learning module.
var interval string // Specifies the dateDue range to be queried. Milliseconds will be truncated. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss
var completionInterval string // Specifies the range of completion dates to be used for filtering. A maximum of 1 year can be specified in the range. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss
var overdue string // Specifies if non-overdue, overdue, or all activities are returned. If not specified, all activities are returned
var pass string // Specifies if only the failed (pass is \"False\") or passed (pass is \"True\") activities are returned. If pass is \"Any\" or if the pass parameter is not supplied, all activities are returned
var pageSize int // Page size
var pageNumber int // Page number
var sortOrder string // Specifies result set sort order sorted by the date due; if not specified, default sort order is descending (Desc)
var types []string // Specifies the activity types.
var statuses []string // Specifies the activity statuses to filter by
var relationship []string // Specifies how the current user relation should be interpreted, and filters the activities returned to only the activities that have the specified relationship. If a value besides Attendee is specified, it will only return Coaching Appointments. If not specified, no filtering is applied.
// Get list of Development Activities
data, response, err := apiInstance.GetUsersDevelopmentActivities(userId, moduleId, interval, completionInterval, overdue, pass, pageSize, pageNumber, sortOrder, types, statuses, relationship)
if err != nil {
	fmt.Printf("Error calling GetUsersDevelopmentActivities: %v\n", err)
} else {
	fmt.Printf("Response:\n  Success: %v\n  Status code: %v\n  Correlation ID: %v\n  Body: %v\n", response.IsSuccess, response.StatusCode, response.CorrelationID, data.String())
}