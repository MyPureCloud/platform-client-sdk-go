{
    "DELETE /api/v2/conversations/{conversationId}/recordings/{recordingId}/annotations/{annotationId}": {
        "operationId": "deleteconversationrecordingannotation",
        "functionName": "DeleteConversationRecordingAnnotation",
        "signature": "DeleteConversationRecordingAnnotation(conversationId, recordingId, annotationId)",
        "parameters": [
            {
                "name": "conversationId",
                "type": "string",
                "required": "true"
            },
            {
                "name": "recordingId",
                "type": "string",
                "required": "true"
            },
            {
                "name": "annotationId",
                "type": "string",
                "required": "true"
            }
        ]
    },
    "DELETE /api/v2/orphanrecordings/{orphanId}": {
        "operationId": "deleteorphanrecording",
        "functionName": "DeleteOrphanrecording",
        "signature": "DeleteOrphanrecording(orphanId)",
        "parameters": [
            {
                "name": "orphanId",
                "type": "string",
                "required": "true"
            }
        ],
        "return": "Orphanrecording"
    },
    "DELETE /api/v2/recording/crossplatform/mediaretentionpolicies": {
        "operationId": "deleterecordingcrossplatformmediaretentionpolicies",
        "functionName": "DeleteRecordingCrossplatformMediaretentionpolicies",
        "signature": "DeleteRecordingCrossplatformMediaretentionpolicies(ids)",
        "parameters": [
            {
                "name": "ids",
                "type": "string",
                "required": "true"
            }
        ]
    },
    "DELETE /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}": {
        "operationId": "deleterecordingcrossplatformmediaretentionpolicy",
        "functionName": "DeleteRecordingCrossplatformMediaretentionpolicy",
        "signature": "DeleteRecordingCrossplatformMediaretentionpolicy(policyId)",
        "parameters": [
            {
                "name": "policyId",
                "type": "string",
                "required": "true"
            }
        ]
    },
    "DELETE /api/v2/recording/jobs/{jobId}": {
        "operationId": "deleterecordingjob",
        "functionName": "DeleteRecordingJob",
        "signature": "DeleteRecordingJob(jobId)",
        "parameters": [
            {
                "name": "jobId",
                "type": "string",
                "required": "true"
            }
        ]
    },
    "DELETE /api/v2/recording/mediaretentionpolicies": {
        "operationId": "deleterecordingmediaretentionpolicies",
        "functionName": "DeleteRecordingMediaretentionpolicies",
        "signature": "DeleteRecordingMediaretentionpolicies(ids)",
        "parameters": [
            {
                "name": "ids",
                "type": "string",
                "required": "true"
            }
        ]
    },
    "DELETE /api/v2/recording/mediaretentionpolicies/{policyId}": {
        "operationId": "deleterecordingmediaretentionpolicy",
        "functionName": "DeleteRecordingMediaretentionpolicy",
        "signature": "DeleteRecordingMediaretentionpolicy(policyId)",
        "parameters": [
            {
                "name": "policyId",
                "type": "string",
                "required": "true"
            }
        ]
    },
    "GET /api/v2/conversations/{conversationId}/recordings/{recordingId}": {
        "operationId": "getconversationrecording",
        "functionName": "GetConversationRecording",
        "signature": "GetConversationRecording(conversationId, recordingId, formatId, emailFormatId, chatFormatId, messageFormatId, download, fileName, locale, mediaFormats)",
        "parameters": [
            {
                "name": "conversationId",
                "type": "string",
                "required": "true"
            },
            {
                "name": "recordingId",
                "type": "string",
                "required": "true"
            },
            {
                "name": "formatId",
                "type": "string",
                "required": "false"
            },
            {
                "name": "emailFormatId",
                "type": "string",
                "required": "false"
            },
            {
                "name": "chatFormatId",
                "type": "string",
                "required": "false"
            },
            {
                "name": "messageFormatId",
                "type": "string",
                "required": "false"
            },
            {
                "name": "download",
                "type": "bool",
                "required": "false"
            },
            {
                "name": "fileName",
                "type": "string",
                "required": "false"
            },
            {
                "name": "locale",
                "type": "string",
                "required": "false"
            },
            {
                "name": "mediaFormats",
                "type": "[]string",
                "required": "false"
            }
        ],
        "return": "Recording"
    },
    "GET /api/v2/conversations/{conversationId}/recordings/{recordingId}/annotations/{annotationId}": {
        "operationId": "getconversationrecordingannotation",
        "functionName": "GetConversationRecordingAnnotation",
        "signature": "GetConversationRecordingAnnotation(conversationId, recordingId, annotationId)",
        "parameters": [
            {
                "name": "conversationId",
                "type": "string",
                "required": "true"
            },
            {
                "name": "recordingId",
                "type": "string",
                "required": "true"
            },
            {
                "name": "annotationId",
                "type": "string",
                "required": "true"
            }
        ],
        "return": "Annotation"
    },
    "GET /api/v2/conversations/{conversationId}/recordings/{recordingId}/annotations": {
        "operationId": "getconversationrecordingannotations",
        "functionName": "GetConversationRecordingAnnotations",
        "signature": "GetConversationRecordingAnnotations(conversationId, recordingId)",
        "parameters": [
            {
                "name": "conversationId",
                "type": "string",
                "required": "true"
            },
            {
                "name": "recordingId",
                "type": "string",
                "required": "true"
            }
        ],
        "return": "[]Annotation"
    },
    "GET /api/v2/conversations/{conversationId}/recordingmetadata": {
        "operationId": "getconversationrecordingmetadata",
        "functionName": "GetConversationRecordingmetadata",
        "signature": "GetConversationRecordingmetadata(conversationId)",
        "parameters": [
            {
                "name": "conversationId",
                "type": "string",
                "required": "true"
            }
        ],
        "return": "[]Recordingmetadata"
    },
    "GET /api/v2/conversations/{conversationId}/recordingmetadata/{recordingId}": {
        "operationId": "getconversationrecordingmetadatarecordingid",
        "functionName": "GetConversationRecordingmetadataRecordingId",
        "signature": "GetConversationRecordingmetadataRecordingId(conversationId, recordingId)",
        "parameters": [
            {
                "name": "conversationId",
                "type": "string",
                "required": "true"
            },
            {
                "name": "recordingId",
                "type": "string",
                "required": "true"
            }
        ],
        "return": "Recordingmetadata"
    },
    "GET /api/v2/conversations/{conversationId}/recordings": {
        "operationId": "getconversationrecordings",
        "functionName": "GetConversationRecordings",
        "signature": "GetConversationRecordings(conversationId, maxWaitMs, formatId, mediaFormats)",
        "parameters": [
            {
                "name": "conversationId",
                "type": "string",
                "required": "true"
            },
            {
                "name": "maxWaitMs",
                "type": "int",
                "required": "false"
            },
            {
                "name": "formatId",
                "type": "string",
                "required": "false"
            },
            {
                "name": "mediaFormats",
                "type": "[]string",
                "required": "false"
            }
        ],
        "return": "[]Recording"
    },
    "GET /api/v2/orphanrecordings/{orphanId}": {
        "operationId": "getorphanrecording",
        "functionName": "GetOrphanrecording",
        "signature": "GetOrphanrecording(orphanId)",
        "parameters": [
            {
                "name": "orphanId",
                "type": "string",
                "required": "true"
            }
        ],
        "return": "Orphanrecording"
    },
    "GET /api/v2/orphanrecordings/{orphanId}/media": {
        "operationId": "getorphanrecordingmedia",
        "functionName": "GetOrphanrecordingMedia",
        "signature": "GetOrphanrecordingMedia(orphanId, formatId, emailFormatId, chatFormatId, messageFormatId, download, fileName, locale, mediaFormats)",
        "parameters": [
            {
                "name": "orphanId",
                "type": "string",
                "required": "true"
            },
            {
                "name": "formatId",
                "type": "string",
                "required": "false"
            },
            {
                "name": "emailFormatId",
                "type": "string",
                "required": "false"
            },
            {
                "name": "chatFormatId",
                "type": "string",
                "required": "false"
            },
            {
                "name": "messageFormatId",
                "type": "string",
                "required": "false"
            },
            {
                "name": "download",
                "type": "bool",
                "required": "false"
            },
            {
                "name": "fileName",
                "type": "string",
                "required": "false"
            },
            {
                "name": "locale",
                "type": "string",
                "required": "false"
            },
            {
                "name": "mediaFormats",
                "type": "[]string",
                "required": "false"
            }
        ],
        "return": "Recording"
    },
    "GET /api/v2/orphanrecordings": {
        "operationId": "getorphanrecordings",
        "functionName": "GetOrphanrecordings",
        "signature": "GetOrphanrecordings(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, hasConversation, media)",
        "parameters": [
            {
                "name": "pageSize",
                "type": "int",
                "required": "false"
            },
            {
                "name": "pageNumber",
                "type": "int",
                "required": "false"
            },
            {
                "name": "sortBy",
                "type": "string",
                "required": "false"
            },
            {
                "name": "expand",
                "type": "[]string",
                "required": "false"
            },
            {
                "name": "nextPage",
                "type": "string",
                "required": "false"
            },
            {
                "name": "previousPage",
                "type": "string",
                "required": "false"
            },
            {
                "name": "hasConversation",
                "type": "bool",
                "required": "false"
            },
            {
                "name": "media",
                "type": "string",
                "required": "false"
            }
        ],
        "return": "Orphanrecordinglisting"
    },
    "GET /api/v2/recording/batchrequests/{jobId}": {
        "operationId": "getrecordingbatchrequest",
        "functionName": "GetRecordingBatchrequest",
        "signature": "GetRecordingBatchrequest(jobId)",
        "parameters": [
            {
                "name": "jobId",
                "type": "string",
                "required": "true"
            }
        ],
        "return": "Batchdownloadjobstatusresult"
    },
    "GET /api/v2/recording/crossplatform/mediaretentionpolicies": {
        "operationId": "getrecordingcrossplatformmediaretentionpolicies",
        "functionName": "GetRecordingCrossplatformMediaretentionpolicies",
        "signature": "GetRecordingCrossplatformMediaretentionpolicies(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, name, enabled, summary, hasErrors, deleteDaysThreshold)",
        "parameters": [
            {
                "name": "pageSize",
                "type": "int",
                "required": "false"
            },
            {
                "name": "pageNumber",
                "type": "int",
                "required": "false"
            },
            {
                "name": "sortBy",
                "type": "string",
                "required": "false"
            },
            {
                "name": "expand",
                "type": "[]string",
                "required": "false"
            },
            {
                "name": "nextPage",
                "type": "string",
                "required": "false"
            },
            {
                "name": "previousPage",
                "type": "string",
                "required": "false"
            },
            {
                "name": "name",
                "type": "string",
                "required": "false"
            },
            {
                "name": "enabled",
                "type": "bool",
                "required": "false"
            },
            {
                "name": "summary",
                "type": "bool",
                "required": "false"
            },
            {
                "name": "hasErrors",
                "type": "bool",
                "required": "false"
            },
            {
                "name": "deleteDaysThreshold",
                "type": "int",
                "required": "false"
            }
        ],
        "return": "Policyentitylisting"
    },
    "GET /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}": {
        "operationId": "getrecordingcrossplatformmediaretentionpolicy",
        "functionName": "GetRecordingCrossplatformMediaretentionpolicy",
        "signature": "GetRecordingCrossplatformMediaretentionpolicy(policyId)",
        "parameters": [
            {
                "name": "policyId",
                "type": "string",
                "required": "true"
            }
        ],
        "return": "Crossplatformpolicy"
    },
    "GET /api/v2/recording/jobs/{jobId}": {
        "operationId": "getrecordingjob",
        "functionName": "GetRecordingJob",
        "signature": "GetRecordingJob(jobId)",
        "parameters": [
            {
                "name": "jobId",
                "type": "string",
                "required": "true"
            }
        ],
        "return": "Recordingjob"
    },
    "GET /api/v2/recording/jobs/{jobId}/failedrecordings": {
        "operationId": "getrecordingjobfailedrecordings",
        "functionName": "GetRecordingJobFailedrecordings",
        "signature": "GetRecordingJobFailedrecordings(jobId, pageSize, pageNumber, includeTotal, cursor)",
        "parameters": [
            {
                "name": "jobId",
                "type": "string",
                "required": "true"
            },
            {
                "name": "pageSize",
                "type": "int",
                "required": "false"
            },
            {
                "name": "pageNumber",
                "type": "int",
                "required": "false"
            },
            {
                "name": "includeTotal",
                "type": "bool",
                "required": "false"
            },
            {
                "name": "cursor",
                "type": "string",
                "required": "false"
            }
        ],
        "return": "Failedrecordingentitylisting"
    },
    "GET /api/v2/recording/jobs": {
        "operationId": "getrecordingjobs",
        "functionName": "GetRecordingJobs",
        "signature": "GetRecordingJobs(pageSize, pageNumber, sortBy, state, showOnlyMyJobs, jobType, includeTotal, cursor)",
        "parameters": [
            {
                "name": "pageSize",
                "type": "int",
                "required": "false"
            },
            {
                "name": "pageNumber",
                "type": "int",
                "required": "false"
            },
            {
                "name": "sortBy",
                "type": "string",
                "required": "false"
            },
            {
                "name": "state",
                "type": "string",
                "required": "false"
            },
            {
                "name": "showOnlyMyJobs",
                "type": "bool",
                "required": "false"
            },
            {
                "name": "jobType",
                "type": "string",
                "required": "false"
            },
            {
                "name": "includeTotal",
                "type": "bool",
                "required": "false"
            },
            {
                "name": "cursor",
                "type": "string",
                "required": "false"
            }
        ],
        "return": "Recordingjobentitylisting"
    },
    "GET /api/v2/recording/keyconfigurations/{keyConfigurationId}": {
        "operationId": "getrecordingkeyconfiguration",
        "functionName": "GetRecordingKeyconfiguration",
        "signature": "GetRecordingKeyconfiguration(keyConfigurationId)",
        "parameters": [
            {
                "name": "keyConfigurationId",
                "type": "string",
                "required": "true"
            }
        ],
        "return": "Recordingencryptionconfiguration"
    },
    "GET /api/v2/recording/keyconfigurations": {
        "operationId": "getrecordingkeyconfigurations",
        "functionName": "GetRecordingKeyconfigurations",
        "signature": "GetRecordingKeyconfigurations()",
        
        "return": "Recordingencryptionconfigurationlisting"
    },
    "GET /api/v2/recording/mediaretentionpolicies": {
        "operationId": "getrecordingmediaretentionpolicies",
        "functionName": "GetRecordingMediaretentionpolicies",
        "signature": "GetRecordingMediaretentionpolicies(pageSize, pageNumber, sortBy, expand, nextPage, previousPage, name, enabled, summary, hasErrors, deleteDaysThreshold)",
        "parameters": [
            {
                "name": "pageSize",
                "type": "int",
                "required": "false"
            },
            {
                "name": "pageNumber",
                "type": "int",
                "required": "false"
            },
            {
                "name": "sortBy",
                "type": "string",
                "required": "false"
            },
            {
                "name": "expand",
                "type": "[]string",
                "required": "false"
            },
            {
                "name": "nextPage",
                "type": "string",
                "required": "false"
            },
            {
                "name": "previousPage",
                "type": "string",
                "required": "false"
            },
            {
                "name": "name",
                "type": "string",
                "required": "false"
            },
            {
                "name": "enabled",
                "type": "bool",
                "required": "false"
            },
            {
                "name": "summary",
                "type": "bool",
                "required": "false"
            },
            {
                "name": "hasErrors",
                "type": "bool",
                "required": "false"
            },
            {
                "name": "deleteDaysThreshold",
                "type": "int",
                "required": "false"
            }
        ],
        "return": "Policyentitylisting"
    },
    "GET /api/v2/recording/mediaretentionpolicies/{policyId}": {
        "operationId": "getrecordingmediaretentionpolicy",
        "functionName": "GetRecordingMediaretentionpolicy",
        "signature": "GetRecordingMediaretentionpolicy(policyId)",
        "parameters": [
            {
                "name": "policyId",
                "type": "string",
                "required": "true"
            }
        ],
        "return": "Policy"
    },
    "GET /api/v2/recording/recordingkeys": {
        "operationId": "getrecordingrecordingkeys",
        "functionName": "GetRecordingRecordingkeys",
        "signature": "GetRecordingRecordingkeys(pageSize, pageNumber)",
        "parameters": [
            {
                "name": "pageSize",
                "type": "int",
                "required": "false"
            },
            {
                "name": "pageNumber",
                "type": "int",
                "required": "false"
            }
        ],
        "return": "Encryptionkeyentitylisting"
    },
    "GET /api/v2/recording/recordingkeys/rotationschedule": {
        "operationId": "getrecordingrecordingkeysrotationschedule",
        "functionName": "GetRecordingRecordingkeysRotationschedule",
        "signature": "GetRecordingRecordingkeysRotationschedule()",
        
        "return": "Keyrotationschedule"
    },
    "GET /api/v2/recording/settings": {
        "operationId": "getrecordingsettings",
        "functionName": "GetRecordingSettings",
        "signature": "GetRecordingSettings(createDefault)",
        "parameters": [
            {
                "name": "createDefault",
                "type": "bool",
                "required": "false"
            }
        ],
        "return": "Recordingsettings"
    },
    "GET /api/v2/recording/uploads/reports/{reportId}": {
        "operationId": "getrecordinguploadsreport",
        "functionName": "GetRecordingUploadsReport",
        "signature": "GetRecordingUploadsReport(reportId)",
        "parameters": [
            {
                "name": "reportId",
                "type": "string",
                "required": "true"
            }
        ],
        "return": "Recordinguploadreport"
    },
    "GET /api/v2/recordings/retention/query": {
        "operationId": "getrecordingsretentionquery",
        "functionName": "GetRecordingsRetentionQuery",
        "signature": "GetRecordingsRetentionQuery(retentionThresholdDays, cursor, pageSize)",
        "parameters": [
            {
                "name": "retentionThresholdDays",
                "type": "int",
                "required": "true"
            },
            {
                "name": "cursor",
                "type": "string",
                "required": "false"
            },
            {
                "name": "pageSize",
                "type": "int",
                "required": "false"
            }
        ],
        "return": "Recordingretentioncursorentitylisting"
    },
    "GET /api/v2/recordings/screensessions": {
        "operationId": "getrecordingsscreensessions",
        "functionName": "GetRecordingsScreensessions",
        "signature": "GetRecordingsScreensessions(pageSize, pageNumber)",
        "parameters": [
            {
                "name": "pageSize",
                "type": "int",
                "required": "false"
            },
            {
                "name": "pageNumber",
                "type": "int",
                "required": "false"
            }
        ],
        "return": "Screenrecordingsessionlisting"
    },
    "PATCH /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}": {
        "operationId": "patchrecordingcrossplatformmediaretentionpolicy",
        "functionName": "PatchRecordingCrossplatformMediaretentionpolicy",
        "signature": "PatchRecordingCrossplatformMediaretentionpolicy(policyId, body)",
        "parameters": [
            {
                "name": "policyId",
                "type": "string",
                "required": "true"
            },
            {
                "name": "body",
                "type": "Crossplatformpolicyupdate",
                "required": "true"
            }
        ],
        "return": "Crossplatformpolicy"
    },
    "PATCH /api/v2/recording/mediaretentionpolicies/{policyId}": {
        "operationId": "patchrecordingmediaretentionpolicy",
        "functionName": "PatchRecordingMediaretentionpolicy",
        "signature": "PatchRecordingMediaretentionpolicy(policyId, body)",
        "parameters": [
            {
                "name": "policyId",
                "type": "string",
                "required": "true"
            },
            {
                "name": "body",
                "type": "Policyupdate",
                "required": "true"
            }
        ],
        "return": "Policy"
    },
    "PATCH /api/v2/recordings/screensessions/{recordingSessionId}": {
        "operationId": "patchrecordingsscreensession",
        "functionName": "PatchRecordingsScreensession",
        "signature": "PatchRecordingsScreensession(recordingSessionId, body)",
        "parameters": [
            {
                "name": "recordingSessionId",
                "type": "string",
                "required": "true"
            },
            {
                "name": "body",
                "type": "Screenrecordingsessionrequest",
                "required": "false"
            }
        ]
    },
    "POST /api/v2/conversations/{conversationId}/recordings/{recordingId}/annotations": {
        "operationId": "postconversationrecordingannotations",
        "functionName": "PostConversationRecordingAnnotations",
        "signature": "PostConversationRecordingAnnotations(conversationId, recordingId, body)",
        "parameters": [
            {
                "name": "conversationId",
                "type": "string",
                "required": "true"
            },
            {
                "name": "recordingId",
                "type": "string",
                "required": "true"
            },
            {
                "name": "body",
                "type": "Annotation",
                "required": "true"
            }
        ],
        "return": "Annotation"
    },
    "POST /api/v2/recording/batchrequests": {
        "operationId": "postrecordingbatchrequests",
        "functionName": "PostRecordingBatchrequests",
        "signature": "PostRecordingBatchrequests(body)",
        "parameters": [
            {
                "name": "body",
                "type": "Batchdownloadjobsubmission",
                "required": "true"
            }
        ],
        "return": "Batchdownloadjobsubmissionresult"
    },
    "POST /api/v2/recording/crossplatform/mediaretentionpolicies": {
        "operationId": "postrecordingcrossplatformmediaretentionpolicies",
        "functionName": "PostRecordingCrossplatformMediaretentionpolicies",
        "signature": "PostRecordingCrossplatformMediaretentionpolicies(body)",
        "parameters": [
            {
                "name": "body",
                "type": "Crossplatformpolicycreate",
                "required": "true"
            }
        ],
        "return": "Crossplatformpolicy"
    },
    "POST /api/v2/recording/jobs": {
        "operationId": "postrecordingjobs",
        "functionName": "PostRecordingJobs",
        "signature": "PostRecordingJobs(body)",
        "parameters": [
            {
                "name": "body",
                "type": "Recordingjobsquery",
                "required": "true"
            }
        ],
        "return": "Recordingjob"
    },
    "POST /api/v2/recording/keyconfigurations": {
        "operationId": "postrecordingkeyconfigurations",
        "functionName": "PostRecordingKeyconfigurations",
        "signature": "PostRecordingKeyconfigurations(body)",
        "parameters": [
            {
                "name": "body",
                "type": "Recordingencryptionconfiguration",
                "required": "true"
            }
        ],
        "return": "Recordingencryptionconfiguration"
    },
    "POST /api/v2/recording/keyconfigurations/validate": {
        "operationId": "postrecordingkeyconfigurationsvalidate",
        "functionName": "PostRecordingKeyconfigurationsValidate",
        "signature": "PostRecordingKeyconfigurationsValidate(body)",
        "parameters": [
            {
                "name": "body",
                "type": "Recordingencryptionconfiguration",
                "required": "true"
            }
        ],
        "return": "Recordingencryptionconfiguration"
    },
    "POST /api/v2/recording/localkeys": {
        "operationId": "postrecordinglocalkeys",
        "functionName": "PostRecordingLocalkeys",
        "signature": "PostRecordingLocalkeys(body)",
        "parameters": [
            {
                "name": "body",
                "type": "Localencryptionkeyrequest",
                "required": "true"
            }
        ],
        "return": "Encryptionkey"
    },
    "POST /api/v2/recording/mediaretentionpolicies": {
        "operationId": "postrecordingmediaretentionpolicies",
        "functionName": "PostRecordingMediaretentionpolicies",
        "signature": "PostRecordingMediaretentionpolicies(body)",
        "parameters": [
            {
                "name": "body",
                "type": "Policycreate",
                "required": "true"
            }
        ],
        "return": "Policy"
    },
    "POST /api/v2/recording/recordingkeys": {
        "operationId": "postrecordingrecordingkeys",
        "functionName": "PostRecordingRecordingkeys",
        "signature": "PostRecordingRecordingkeys()",
        
        "return": "Encryptionkey"
    },
    "POST /api/v2/recording/uploads/reports": {
        "operationId": "postrecordinguploadsreports",
        "functionName": "PostRecordingUploadsReports",
        "signature": "PostRecordingUploadsReports(body)",
        "parameters": [
            {
                "name": "body",
                "type": "Recordinguploadreportrequest",
                "required": "true"
            }
        ],
        "return": "Recordinguploadreport"
    },
    "POST /api/v2/recordings/deletionprotection": {
        "operationId": "postrecordingsdeletionprotection",
        "functionName": "PostRecordingsDeletionprotection",
        "signature": "PostRecordingsDeletionprotection(body)",
        "parameters": [
            {
                "name": "body",
                "type": "Conversationdeletionprotectionquery",
                "required": "true"
            }
        ],
        "return": "[]Addressableentityref"
    },
    "POST /api/v2/recordings/screensessions/acknowledge": {
        "operationId": "postrecordingsscreensessionsacknowledge",
        "functionName": "PostRecordingsScreensessionsAcknowledge",
        "signature": "PostRecordingsScreensessionsAcknowledge(body)",
        "parameters": [
            {
                "name": "body",
                "type": "Acknowledgescreenrecordingrequest",
                "required": "true"
            }
        ]
    },
    "POST /api/v2/recordings/screensessions/metadata": {
        "operationId": "postrecordingsscreensessionsmetadata",
        "functionName": "PostRecordingsScreensessionsMetadata",
        "signature": "PostRecordingsScreensessionsMetadata(body)",
        "parameters": [
            {
                "name": "body",
                "type": "Screenrecordingmetadatarequest",
                "required": "true"
            }
        ]
    },
    "PUT /api/v2/conversations/{conversationId}/recordings/{recordingId}": {
        "operationId": "putconversationrecording",
        "functionName": "PutConversationRecording",
        "signature": "PutConversationRecording(conversationId, recordingId, body, clearExport)",
        "parameters": [
            {
                "name": "conversationId",
                "type": "string",
                "required": "true"
            },
            {
                "name": "recordingId",
                "type": "string",
                "required": "true"
            },
            {
                "name": "body",
                "type": "Recording",
                "required": "true"
            },
            {
                "name": "clearExport",
                "type": "bool",
                "required": "false"
            }
        ],
        "return": "Recording"
    },
    "PUT /api/v2/conversations/{conversationId}/recordings/{recordingId}/annotations/{annotationId}": {
        "operationId": "putconversationrecordingannotation",
        "functionName": "PutConversationRecordingAnnotation",
        "signature": "PutConversationRecordingAnnotation(conversationId, recordingId, annotationId, body)",
        "parameters": [
            {
                "name": "conversationId",
                "type": "string",
                "required": "true"
            },
            {
                "name": "recordingId",
                "type": "string",
                "required": "true"
            },
            {
                "name": "annotationId",
                "type": "string",
                "required": "true"
            },
            {
                "name": "body",
                "type": "Annotation",
                "required": "true"
            }
        ],
        "return": "Annotation"
    },
    "PUT /api/v2/orphanrecordings/{orphanId}": {
        "operationId": "putorphanrecording",
        "functionName": "PutOrphanrecording",
        "signature": "PutOrphanrecording(orphanId, body)",
        "parameters": [
            {
                "name": "orphanId",
                "type": "string",
                "required": "true"
            },
            {
                "name": "body",
                "type": "Orphanupdaterequest",
                "required": "false"
            }
        ],
        "return": "Recording"
    },
    "PUT /api/v2/recording/crossplatform/mediaretentionpolicies/{policyId}": {
        "operationId": "putrecordingcrossplatformmediaretentionpolicy",
        "functionName": "PutRecordingCrossplatformMediaretentionpolicy",
        "signature": "PutRecordingCrossplatformMediaretentionpolicy(policyId, body)",
        "parameters": [
            {
                "name": "policyId",
                "type": "string",
                "required": "true"
            },
            {
                "name": "body",
                "type": "Crossplatformpolicy",
                "required": "true"
            }
        ],
        "return": "Crossplatformpolicy"
    },
    "PUT /api/v2/recording/jobs/{jobId}": {
        "operationId": "putrecordingjob",
        "functionName": "PutRecordingJob",
        "signature": "PutRecordingJob(jobId, body)",
        "parameters": [
            {
                "name": "jobId",
                "type": "string",
                "required": "true"
            },
            {
                "name": "body",
                "type": "Executerecordingjobsquery",
                "required": "true"
            }
        ],
        "return": "Recordingjob"
    },
    "PUT /api/v2/recording/keyconfigurations/{keyConfigurationId}": {
        "operationId": "putrecordingkeyconfiguration",
        "functionName": "PutRecordingKeyconfiguration",
        "signature": "PutRecordingKeyconfiguration(keyConfigurationId, body)",
        "parameters": [
            {
                "name": "keyConfigurationId",
                "type": "string",
                "required": "true"
            },
            {
                "name": "body",
                "type": "Recordingencryptionconfiguration",
                "required": "true"
            }
        ],
        "return": "Recordingencryptionconfiguration"
    },
    "PUT /api/v2/recording/mediaretentionpolicies/{policyId}": {
        "operationId": "putrecordingmediaretentionpolicy",
        "functionName": "PutRecordingMediaretentionpolicy",
        "signature": "PutRecordingMediaretentionpolicy(policyId, body)",
        "parameters": [
            {
                "name": "policyId",
                "type": "string",
                "required": "true"
            },
            {
                "name": "body",
                "type": "Policy",
                "required": "true"
            }
        ],
        "return": "Policy"
    },
    "PUT /api/v2/recording/recordingkeys/rotationschedule": {
        "operationId": "putrecordingrecordingkeysrotationschedule",
        "functionName": "PutRecordingRecordingkeysRotationschedule",
        "signature": "PutRecordingRecordingkeysRotationschedule(body)",
        "parameters": [
            {
                "name": "body",
                "type": "Keyrotationschedule",
                "required": "true"
            }
        ],
        "return": "Keyrotationschedule"
    },
    "PUT /api/v2/recording/settings": {
        "operationId": "putrecordingsettings",
        "functionName": "PutRecordingSettings",
        "signature": "PutRecordingSettings(body)",
        "parameters": [
            {
                "name": "body",
                "type": "Recordingsettings",
                "required": "true"
            }
        ],
        "return": "Recordingsettings"
    },
    "PUT /api/v2/recordings/deletionprotection": {
        "operationId": "putrecordingsdeletionprotection",
        "functionName": "PutRecordingsDeletionprotection",
        "signature": "PutRecordingsDeletionprotection(protect, body)",
        "parameters": [
            {
                "name": "protect",
                "type": "bool",
                "required": "false"
            },
            {
                "name": "body",
                "type": "Conversationdeletionprotectionquery",
                "required": "false"
            }
        ]
    }
    
}