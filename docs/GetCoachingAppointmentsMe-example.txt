config := platformclientv2.GetDefaultConfiguration()
config.BasePath = ""    // expected format: mypurecloud.com
config.AccessToken = "your_access_token" // or use AuthorizeClientCredentials(...) or AuthorizeCodeGrant(...)

apiInstance := platformclientv2.NewCoachingApiWithConfig(config)

var interval string // Interval to filter data by. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss
var pageNumber int // Page number
var pageSize int // Page size
var statuses []string // Appointment Statuses to filter by
var facilitatorIds []string // The facilitator IDs for which to retrieve appointments
var sortOrder string // Sort (by due date) either Asc or Desc
var relationships []string // Relationships to filter by
var completionInterval string // Appointment completion start and end to filter by. End date is not inclusive. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss
var overdue string // Overdue status to filter by
var intervalCondition string // Filter condition for interval
// Get my appointments for a given date range
data, response, err := apiInstance.GetCoachingAppointmentsMe(interval, pageNumber, pageSize, statuses, facilitatorIds, sortOrder, relationships, completionInterval, overdue, intervalCondition)
fmt.Printf("Response:\n  Success: %v\n  Status code: %v\n  Correlation ID: %v\n  Body: %v\n", response.IsSuccess, response.StatusCode, response.CorrelationID, data.String())
if err != nil {
	fmt.Printf("Error calling GetCoachingAppointmentsMe: %v\n", err)
}